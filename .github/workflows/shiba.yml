name: Build Pixel 8 Kernel with KernelSU

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

env:
  KERNEL_NAME: zuma-kernel
  CONFIG: gki_defconfig
  ARCH: arm64
  SUBARCH: arm64
  PLATFORM: zuma

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v4
      with:
        repository: kerneltoast/android_kernel_google_zuma
        ref: android14-6.1
        path: kernel
        submodules: recursive

    - name: Checkout AnyKernel3
      uses: actions/checkout@v4
      with:
        repository: osm0sis/AnyKernel3
        path: anykernel3

    - name: Checkout KernelSU
      uses: actions/checkout@v4
      with:
        repository: 5ec1cff/KernelSU
        path: KernelSU
        ref: main

    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libncurses-dev \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          bc \
          git \
          cmake \
          python3 \
          python3-pip \
          zip

    - name: Install Android build tools
      run: |
        # 安装Android NDK/工具链
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip commandlinetools-linux-*.zip -d cmdline-tools
        mkdir -p android-sdk
        mv cmdline-tools android-sdk/
        
        # 安装aarch64-linux-android工具链
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Setup KernelSU
      run: |
        cd kernel
        # 集成KernelSU到内核
        ln -sf ../KernelSU KernelSU
        # 运行KernelSU设置脚本
        bash ../KernelSU/kernelpatch/setup.sh ../KernelSU
        
        # 应用KernelSU补丁（如果需要）
        # bash ../KernelSU/kernelpatch/apply_patch.sh 6.1

    - name: Setup build environment
      run: |
        cd kernel
        export PATH=$PATH:$(pwd)/../android-sdk/cmdline-tools/bin
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
        
        # 设置配置文件
        make $CONFIG

    - name: Configure KernelSU options
      run: |
        cd kernel
        # 启用KernelSU配置选项
        echo "CONFIG_KSU=y" >> .config
        echo "CONFIG_OVERLAY_FS=y" >> .config
        
        # 更新配置
        make olddefconfig

    - name: Build kernel
      run: |
        cd kernel
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        # 获取CPU核心数用于并行编译
        JOBS=$(nproc)
        echo "Building with $JOBS jobs"
        
        # 编译内核
        make -j$JOBS
        
        # 编译模块
        make modules -j$JOBS

    - name: Prepare AnyKernel3 package
      run: |
        cd anykernel3
        # 复制内核镜像
        cp ../kernel/arch/arm64/boot/Image.gz-dtb zImage
        
        # 创建模块目录并复制模块
        mkdir -p modules
        find ../kernel -name "*.ko" -exec cp {} modules/ \;
        
        # 更新anykernel脚本
        cat > anykernel.sh << 'EOF'
        #!/system/bin/sh
        # AnyKernel3 Ramdisk Mod Script
        # osm0sis @ xda-developers
        
        ## AnyKernel setup
        # begin properties
        properties() { '
        kernel.string=zuma-kernel with KernelSU
        do.devicecheck=1
        do.modules=0
        do.systemless=1
        do.cleanup=1
        do.cleanuponabort=0
        device.name1=husky
        device.name2=shiba
        '; } # end properties
        
        # shell variables
        block=/dev/block/bootdevice/by-name/boot;
        is_slot_device=1;
        ramdisk_compression=auto;
        
        ## AnyKernel methods (DO NOT CHANGE)
        # import patching functions/variables - see for reference
        . tools/ak3-core.sh;
        
        ## AnyKernel install
        dump_boot;
        
        # begin ramdisk changes
        # KernelSU
        if [ -d $ramdisk/.backup ]; then
          patch_cmdline modules.load modules.load
        else
          patch_prop default.prop ro.boot.verifiedbootstate orange
          patch_prop default.prop ro.secure 0
          patch_prop default.prop ro.debuggable 1
          patch_prop default.prop ro.adb.secure 0
          patch_prop default.prop ro.kernel.android.boot.selinux permissive
        fi
        
        # end ramdisk changes
        
        write_boot;
        ## end install
        EOF
        
        chmod +x anykernel.sh

    - name: Create flashable zip
      run: |
        cd anykernel3
        zip -r9 ../${KERNEL_NAME}-KernelSU-$(date +%Y%m%d-%H%M).zip * -x .git README.md

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: |
          kernel/arch/arm64/boot/Image.gz-dtb
          *.zip
        retention-days: 30

    - name: Upload to releases
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: softprops/action-gh-release@v1
      with:
        files: *.zip
        tag_name: build-$(date +%Y%m%d-%H%M)
        body: |
          Pixel 8 Kernel with KernelSU
          - Build date: $(date)
          - Commit: ${{ github.sha }}
          - Kernel: zuma android14-6.1
          - Features: KernelSU integrated

    - name: Notify build completion
      if: always()
      run: |
        echo "Build completed with status: ${{ job.status }}"
        echo "Kernel image: kernel/arch/arm64/boot/Image.gz-dtb"
        echo "Flashable zip: *.zip"